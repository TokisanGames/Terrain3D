:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/../_plugins/Terrain3D/doc/classes/Terrain3DStorage.xml.

.. _class_Terrain3DStorage:

Terrain3DStorage
================

**Inherits:** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

.. rst-class:: classref-introduction-group

Description
-----------

This resource stores all map data for Terrain3D. Also see `Controlmap Format <../docs/controlmap_format.html>`__ and `Storage Format Changelog <../docs/storage_format.html>`__.

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +-----------------------------------------------------+-----------------------------------------------------------------------+-------------------+
   | :ref:`Image[]<class_Image>`                         | :ref:`color_maps<class_Terrain3DStorage_property_color_maps>`         | ``[]``            |
   +-----------------------------------------------------+-----------------------------------------------------------------------+-------------------+
   | :ref:`Image[]<class_Image>`                         | :ref:`control_maps<class_Terrain3DStorage_property_control_maps>`     | ``[]``            |
   +-----------------------------------------------------+-----------------------------------------------------------------------+-------------------+
   | :ref:`Image[]<class_Image>`                         | :ref:`height_maps<class_Terrain3DStorage_property_height_maps>`       | ``[]``            |
   +-----------------------------------------------------+-----------------------------------------------------------------------+-------------------+
   | :ref:`Vector2<class_Vector2>`                       | :ref:`height_range<class_Terrain3DStorage_property_height_range>`     | ``Vector2(0, 0)`` |
   +-----------------------------------------------------+-----------------------------------------------------------------------+-------------------+
   | :ref:`Vector2i[]<class_Vector2i>`                   | :ref:`region_offsets<class_Terrain3DStorage_property_region_offsets>` | ``[]``            |
   +-----------------------------------------------------+-----------------------------------------------------------------------+-------------------+
   | :ref:`RegionSize<enum_Terrain3DStorage_RegionSize>` | :ref:`region_size<class_Terrain3DStorage_property_region_size>`       | ``1024``          |
   +-----------------------------------------------------+-----------------------------------------------------------------------+-------------------+
   | :ref:`bool<class_bool>`                             | :ref:`save_16_bit<class_Terrain3DStorage_property_save_16_bit>`       | ``false``         |
   +-----------------------------------------------------+-----------------------------------------------------------------------+-------------------+
   | :ref:`float<class_float>`                           | :ref:`version<class_Terrain3DStorage_property_version>`               | ``0.8``           |
   +-----------------------------------------------------+-----------------------------------------------------------------------+-------------------+

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | godot.Error                     | :ref:`add_region<class_Terrain3DStorage_method_add_region>` **(** :ref:`Vector3<class_Vector3>` global_position, :ref:`Image[]<class_Image>` images=[], :ref:`bool<class_bool>` update=true **)**                                                                                   |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | godot.Error                     | :ref:`export_image<class_Terrain3DStorage_method_export_image>` **(** :ref:`String<class_String>` file_name, :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type **)**                                                                                                           |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                            | :ref:`force_update_maps<class_Terrain3DStorage_method_force_update_maps>` **(** :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type=3 **)**                                                                                                                                      |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>`       | :ref:`get_color<class_Terrain3DStorage_method_get_color>` **(** :ref:`Vector3<class_Vector3>` global_position **)**                                                                                                                                                                 |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`           | :ref:`get_control<class_Terrain3DStorage_method_get_control>` **(** :ref:`Vector3<class_Vector3>` global_position **)**                                                                                                                                                             |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`       | :ref:`get_height<class_Terrain3DStorage_method_get_height>` **(** :ref:`Vector3<class_Vector3>` global_position **)**                                                                                                                                                               |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Image<class_Image>`       | :ref:`get_map_region<class_Terrain3DStorage_method_get_map_region>` **(** :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type, :ref:`int<class_int>` region_index **)**                                                                                                          |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Image[]<class_Image>`     | :ref:`get_maps<class_Terrain3DStorage_method_get_maps>` **(** :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type **)**                                                                                                                                                          |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Image[]<class_Image>`     | :ref:`get_maps_copy<class_Terrain3DStorage_method_get_maps_copy>` **(** :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type **)**                                                                                                                                                |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Vector3<class_Vector3>`   | :ref:`get_mesh_vertex<class_Terrain3DStorage_method_get_mesh_vertex>` **(** :ref:`int<class_int>` lod, :ref:`HeightFilter<enum_Terrain3DStorage_HeightFilter>` filter, :ref:`Vector3<class_Vector3>` global_position **)**                                                          |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Vector3<class_Vector3>`   | :ref:`get_normal<class_Terrain3DStorage_method_get_normal>` **(** :ref:`Vector3<class_Vector3>` global_position **)**                                                                                                                                                               |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>`       | :ref:`get_pixel<class_Terrain3DStorage_method_get_pixel>` **(** :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type, :ref:`Vector3<class_Vector3>` global_position **)**                                                                                                         |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`           | :ref:`get_region_count<class_Terrain3DStorage_method_get_region_count>` **(** **)**                                                                                                                                                                                                 |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`           | :ref:`get_region_index<class_Terrain3DStorage_method_get_region_index>` **(** :ref:`Vector3<class_Vector3>` global_position **)**                                                                                                                                                   |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Vector2i<class_Vector2i>` | :ref:`get_region_offset<class_Terrain3DStorage_method_get_region_offset>` **(** :ref:`Vector3<class_Vector3>` global_position **)**                                                                                                                                                 |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`       | :ref:`get_roughness<class_Terrain3DStorage_method_get_roughness>` **(** :ref:`Vector3<class_Vector3>` global_position **)**                                                                                                                                                         |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Vector3<class_Vector3>`   | :ref:`get_texture_id<class_Terrain3DStorage_method_get_texture_id>` **(** :ref:`Vector3<class_Vector3>` global_position **)**                                                                                                                                                       |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`         | :ref:`has_region<class_Terrain3DStorage_method_has_region>` **(** :ref:`Vector3<class_Vector3>` global_position **)**                                                                                                                                                               |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                            | :ref:`import_images<class_Terrain3DStorage_method_import_images>` **(** :ref:`Image[]<class_Image>` images, :ref:`Vector3<class_Vector3>` global_position=Vector3(0, 0, 0), :ref:`float<class_float>` offset=0.0, :ref:`float<class_float>` scale=1.0 **)**                         |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Image<class_Image>`       | :ref:`layered_to_image<class_Terrain3DStorage_method_layered_to_image>` **(** :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type **)**                                                                                                                                          |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Image<class_Image>`       | :ref:`load_image<class_Terrain3DStorage_method_load_image>` **(** :ref:`String<class_String>` file_name, :ref:`int<class_int>` cache_mode=0, :ref:`Vector2<class_Vector2>` r16_height_range=Vector2(0, 255), :ref:`Vector2i<class_Vector2i>` r16_size=Vector2i(0, 0) **)** |static| |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                            | :ref:`remove_region<class_Terrain3DStorage_method_remove_region>` **(** :ref:`Vector3<class_Vector3>` global_position, :ref:`bool<class_bool>` update=true **)**                                                                                                                    |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                            | :ref:`save<class_Terrain3DStorage_method_save>` **(** **)**                                                                                                                                                                                                                         |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                            | :ref:`set_color<class_Terrain3DStorage_method_set_color>` **(** :ref:`Vector3<class_Vector3>` global_position, :ref:`Color<class_Color>` color **)**                                                                                                                                |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                            | :ref:`set_control<class_Terrain3DStorage_method_set_control>` **(** :ref:`Vector3<class_Vector3>` global_position, :ref:`int<class_int>` control **)**                                                                                                                              |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                            | :ref:`set_height<class_Terrain3DStorage_method_set_height>` **(** :ref:`Vector3<class_Vector3>` global_position, :ref:`float<class_float>` height **)**                                                                                                                             |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                            | :ref:`set_map_region<class_Terrain3DStorage_method_set_map_region>` **(** :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type, :ref:`int<class_int>` region_index, :ref:`Image<class_Image>` image **)**                                                                         |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                            | :ref:`set_maps<class_Terrain3DStorage_method_set_maps>` **(** :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type, :ref:`Image[]<class_Image>` maps **)**                                                                                                                        |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                            | :ref:`set_pixel<class_Terrain3DStorage_method_set_pixel>` **(** :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type, :ref:`Vector3<class_Vector3>` global_position, :ref:`Color<class_Color>` pixel **)**                                                                        |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                            | :ref:`set_roughness<class_Terrain3DStorage_method_set_roughness>` **(** :ref:`Vector3<class_Vector3>` global_position, :ref:`float<class_float>` roughness **)**                                                                                                                    |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                            | :ref:`update_height_range<class_Terrain3DStorage_method_update_height_range>` **(** **)**                                                                                                                                                                                           |
   +---------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Signals
-------

.. _class_Terrain3DStorage_signal_height_maps_changed:

.. rst-class:: classref-signal

**height_maps_changed** **(** **)**

Emitted when the height maps have changed and been regenerated.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_signal_maps_edited:

.. rst-class:: classref-signal

**maps_edited** **(** :ref:`AABB<class_AABB>` edited_area **)**

This signal is emitted whenever the editor is used to:

- add or remove a region,

- alter a region map with a brush tool,

- undo or redo any of the above operations.

The parameter contains the axis-aligned bounding box of the area edited.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_signal_region_size_changed:

.. rst-class:: classref-signal

**region_size_changed** **(** **)**

Emitted when :ref:`region_size<class_Terrain3DStorage_property_region_size>` is changed.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_signal_regions_changed:

.. rst-class:: classref-signal

**regions_changed** **(** **)**

Emitted when any of the maps or regions are modified and regenerated.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Enumerations
------------

.. _enum_Terrain3DStorage_MapType:

.. rst-class:: classref-enumeration

enum **MapType**:

.. _class_Terrain3DStorage_constant_TYPE_HEIGHT:

.. rst-class:: classref-enumeration-constant

:ref:`MapType<enum_Terrain3DStorage_MapType>` **TYPE_HEIGHT** = ``0``

Height map.

.. _class_Terrain3DStorage_constant_TYPE_CONTROL:

.. rst-class:: classref-enumeration-constant

:ref:`MapType<enum_Terrain3DStorage_MapType>` **TYPE_CONTROL** = ``1``

Control map.

.. _class_Terrain3DStorage_constant_TYPE_COLOR:

.. rst-class:: classref-enumeration-constant

:ref:`MapType<enum_Terrain3DStorage_MapType>` **TYPE_COLOR** = ``2``

Color map.

.. _class_Terrain3DStorage_constant_TYPE_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`MapType<enum_Terrain3DStorage_MapType>` **TYPE_MAX** = ``3``



.. rst-class:: classref-item-separator

----

.. _enum_Terrain3DStorage_RegionSize:

.. rst-class:: classref-enumeration

enum **RegionSize**:

.. _class_Terrain3DStorage_constant_SIZE_1024:

.. rst-class:: classref-enumeration-constant

:ref:`RegionSize<enum_Terrain3DStorage_RegionSize>` **SIZE_1024** = ``1024``

Region size is 1024 x 1024 vertices or pixels on maps.

.. rst-class:: classref-item-separator

----

.. _enum_Terrain3DStorage_HeightFilter:

.. rst-class:: classref-enumeration

enum **HeightFilter**:

.. _class_Terrain3DStorage_constant_HEIGHT_FILTER_NEAREST:

.. rst-class:: classref-enumeration-constant

:ref:`HeightFilter<enum_Terrain3DStorage_HeightFilter>` **HEIGHT_FILTER_NEAREST** = ``0``

Samples the height map at the exact coordinates given.

.. _class_Terrain3DStorage_constant_HEIGHT_FILTER_MINIMUM:

.. rst-class:: classref-enumeration-constant

:ref:`HeightFilter<enum_Terrain3DStorage_HeightFilter>` **HEIGHT_FILTER_MINIMUM** = ``1``

Samples (1 << lod) \* 2 heights around the given coordinates and returns the lowest.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Constants
---------

.. _class_Terrain3DStorage_constant_REGION_MAP_SIZE:

.. rst-class:: classref-constant

**REGION_MAP_SIZE** = ``16``

Hard coded number of regions on a side. The total number of regions is this squared.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_Terrain3DStorage_property_color_maps:

.. rst-class:: classref-property

:ref:`Image[]<class_Image>` **color_maps** = ``[]``

.. rst-class:: classref-property-setget

- void **set_color_maps** **(** :ref:`Image[]<class_Image>` value **)**
- :ref:`Image[]<class_Image>` **get_color_maps** **(** **)**

The Array of Images containing all the color maps for all regions.

Image format: FORMAT_RGBA8, 32-bits per pixel as four 8-bit components.

\ **RGB** is used for color, which is multiplied by albedo in the shader. Multiply is a blend mode that only darkens.

\ **A** is used for a roughness modifier. A value of 0.5 means no change to the existing texture roughness. Higher than this value increases roughness, lower decreases it.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_property_control_maps:

.. rst-class:: classref-property

:ref:`Image[]<class_Image>` **control_maps** = ``[]``

.. rst-class:: classref-property-setget

- void **set_control_maps** **(** :ref:`Image[]<class_Image>` value **)**
- :ref:`Image[]<class_Image>` **get_control_maps** **(** **)**

The Array of Images containing all the control maps for all regions.

Image format: FORMAT_RF, 32-bit per pixel as full-precision floating-point.

However we interpret these images as format: `RenderingDevice.DATA_FORMAT_R32_UINT <https://docs.godotengine.org/en/stable/classes/class_renderingdevice.html#class-renderingdevice-constant-data-format-r32-uint>`__ aka OpenGL RG32UI 32-bit per pixel as unsigned integer. See `Control map format <../docs/controlmap_format.html>`__.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_property_height_maps:

.. rst-class:: classref-property

:ref:`Image[]<class_Image>` **height_maps** = ``[]``

.. rst-class:: classref-property-setget

- void **set_height_maps** **(** :ref:`Image[]<class_Image>` value **)**
- :ref:`Image[]<class_Image>` **get_height_maps** **(** **)**

The Array of Images containing all the heightmaps for all regions.

Image format: FORMAT_RF, 32-bit per pixel as full-precision floating-point.

Defines the height value of the terrain at a given pixel. This is sent to the vertex shader on the GPU which modifies the mesh in real-time.

Editing is always done in 32-bit. We do provide an option to save as 16-bit, see :ref:`save_16_bit<class_Terrain3DStorage_property_save_16_bit>`, which converts to 32-bit on load and back to 16-bit on save.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_property_height_range:

.. rst-class:: classref-property

:ref:`Vector2<class_Vector2>` **height_range** = ``Vector2(0, 0)``

.. rst-class:: classref-property-setget

- void **set_height_range** **(** :ref:`Vector2<class_Vector2>` value **)**
- :ref:`Vector2<class_Vector2>` **get_height_range** **(** **)**

The highest and lowest heights for the sculpted terrain. Any :ref:`Terrain3DMaterial.world_background<class_Terrain3DMaterial_property_world_background>` used that extends the mesh height outside of this range will not change this variable. Also see :ref:`Terrain3D.render_cull_margin<class_Terrain3D_property_render_cull_margin>`.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_property_region_offsets:

.. rst-class:: classref-property

:ref:`Vector2i[]<class_Vector2i>` **region_offsets** = ``[]``

.. rst-class:: classref-property-setget

- void **set_region_offsets** **(** :ref:`Vector2i[]<class_Vector2i>` value **)**
- :ref:`Vector2i[]<class_Vector2i>` **get_region_offsets** **(** **)**

An array of the active regions in region grid coordinates (+/-8, +/-8). e.g. { (0, 0), (-1, 3), (1, 1) }. It is ordered by the sequence in which regions were created, not by location.

Also see :ref:`get_region_index<class_Terrain3DStorage_method_get_region_index>` which returns the index into this array based on location.

And :ref:`get_region_offset<class_Terrain3DStorage_method_get_region_offset>` which converts a location in world space to a region space, which is what is stored in this array. Eg. ``get_region_offset(Vector3(1500, 0, 1500))`` would return (1, 1).

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_property_region_size:

.. rst-class:: classref-property

:ref:`RegionSize<enum_Terrain3DStorage_RegionSize>` **region_size** = ``1024``

.. rst-class:: classref-property-setget

- void **set_region_size** **(** :ref:`RegionSize<enum_Terrain3DStorage_RegionSize>` value **)**
- :ref:`RegionSize<enum_Terrain3DStorage_RegionSize>` **get_region_size** **(** **)**

The size of each region. Limited to 1024 for now.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_property_save_16_bit:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **save_16_bit** = ``false``

.. rst-class:: classref-property-setget

- void **set_save_16_bit** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_save_16_bit** **(** **)**

Heightmaps are loaded and edited in 32-bit. This option converts the file to 16-bit upon saving so reduce file size. This process is lossy.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_property_version:

.. rst-class:: classref-property

:ref:`float<class_float>` **version** = ``0.8``

.. rst-class:: classref-property-setget

- void **set_version** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_version** **(** **)**

Current version of this storage resource. This is used for upgrading data files and is independent of the :ref:`Terrain3D.version<class_Terrain3D_property_version>`. This is updated to the latest version upon saving this resource.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_Terrain3DStorage_method_add_region:

.. rst-class:: classref-method

godot.Error **add_region** **(** :ref:`Vector3<class_Vector3>` global_position, :ref:`Image[]<class_Image>` images=[], :ref:`bool<class_bool>` update=true **)**

Adds a region for sculpting and painting. This allocates new set of :ref:`region_size<class_Terrain3DStorage_property_region_size>` sized image maps in memory and on disk to store sculpting and texture painting data.

If the region already exists and image maps are included, the current maps will be overwritten. This means that if some maps are null, existing maps will be removed.

Parameters:

-	p_global_position - the world location to place the region, which gets rounded down to the nearest region_size multiple. That means adding a region at (1500, 0, 1500) is the same as adding it at (1024, 0, 1024) when region_size is 1024.

-	p_images - Optional array of { Height, Control, Color } with region_sized images. See :ref:`MapType<enum_Terrain3DStorage_MapType>`.

-	p_update - rebuild the maps if true. Set to false if bulk adding many regions, then true on the last one or use :ref:`force_update_maps<class_Terrain3DStorage_method_force_update_maps>`.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_export_image:

.. rst-class:: classref-method

godot.Error **export_image** **(** :ref:`String<class_String>` file_name, :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type **)**

Exports the specified map type as one of r16/raw, exr, jpg, png, webp, res, tres. 

R16 or exr are recommended for roundtrip external editing.

R16 can be edited by Krita, however you must know the dimensions and min/max before reimporting. This information is printed to the console.

Res/tres allow storage in any of Godot's native Image formats.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_force_update_maps:

.. rst-class:: classref-method

void **force_update_maps** **(** :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type=3 **)**

Regenerates the TextureArrays that house the requested map types.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_get_color:

.. rst-class:: classref-method

:ref:`Color<class_Color>` **get_color** **(** :ref:`Vector3<class_Vector3>` global_position **)**

Returns the associated pixel on the color map at the requested location.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_get_control:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_control** **(** :ref:`Vector3<class_Vector3>` global_position **)**

Returns the associated pixel on the control map at the requested location.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_get_height:

.. rst-class:: classref-method

:ref:`float<class_float>` **get_height** **(** :ref:`Vector3<class_Vector3>` global_position **)**

Returns the associated pixel on the height map at the requested location.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_get_map_region:

.. rst-class:: classref-method

:ref:`Image<class_Image>` **get_map_region** **(** :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type, :ref:`int<class_int>` region_index **)**

Returns the Image for the specified map type and region. E.g. Returns the region_size height map Image at the first defined region 0.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_get_maps:

.. rst-class:: classref-method

:ref:`Image[]<class_Image>` **get_maps** **(** :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type **)**

Returns an Array of Images containing all of the regions for the specified map type.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_get_maps_copy:

.. rst-class:: classref-method

:ref:`Image[]<class_Image>` **get_maps_copy** **(** :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type **)**

Returns a copy of the Array of Images containing all of the regions for the specified map type.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_get_mesh_vertex:

.. rst-class:: classref-method

:ref:`Vector3<class_Vector3>` **get_mesh_vertex** **(** :ref:`int<class_int>` lod, :ref:`HeightFilter<enum_Terrain3DStorage_HeightFilter>` filter, :ref:`Vector3<class_Vector3>` global_position **)**

Returns the location of a terrain vertex at a certain LOD. If there is a hole at the position, it returns NAN in the vector's Y coordinate.

\ ``lod`` - Determines how many heights around the given global position will be sampled. Range 0 - 8.

\ ``filter`` - Specifies how samples are filtered. See :ref:`HeightFilter<enum_Terrain3DStorage_HeightFilter>`.

\ ``global_position`` - X and Z coordinates of the vertex. Heights will be sampled around these coordinates.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_get_normal:

.. rst-class:: classref-method

:ref:`Vector3<class_Vector3>` **get_normal** **(** :ref:`Vector3<class_Vector3>` global_position **)**

Returns the terrain normal at the specified location.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_get_pixel:

.. rst-class:: classref-method

:ref:`Color<class_Color>` **get_pixel** **(** :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type, :ref:`Vector3<class_Vector3>` global_position **)**

Returns the pixel for the map type associated with the specified location.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_get_region_count:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_region_count** **(** **)**

Returns the number of allocated regions.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_get_region_index:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_region_index** **(** :ref:`Vector3<class_Vector3>` global_position **)**

Returns the index into the :ref:`region_offsets<class_Terrain3DStorage_property_region_offsets>` array for the region associated with the specified location.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_get_region_offset:

.. rst-class:: classref-method

:ref:`Vector2i<class_Vector2i>` **get_region_offset** **(** :ref:`Vector3<class_Vector3>` global_position **)**

Converts a world space location to region space. For a region_size of 1024 this basically means ``global_positoin/1024.0``. Also see :ref:`region_offsets<class_Terrain3DStorage_property_region_offsets>`.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_get_roughness:

.. rst-class:: classref-method

:ref:`float<class_float>` **get_roughness** **(** :ref:`Vector3<class_Vector3>` global_position **)**

Returns the roughness modifier (wetness) on the color map alpha channel associated with the specified location.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_get_texture_id:

.. rst-class:: classref-method

:ref:`Vector3<class_Vector3>` **get_texture_id** **(** :ref:`Vector3<class_Vector3>` global_position **)**

Returns a Vector3 with x = base texture id, y = overlay id, z = blend value.

It's up to you to determine which is visually apparent based on your shader settings, such as height or alpha blending.

This is often used for things like footsteps. Observing how this is done in Witcher 3, there are only about 6 sounds used (snow, foliage, dirt, gravel, rock, wood), and they are not pixel perfect, except for wood. However that is easy to do by detecting if the player is walking on wood meshes. The other 5 sounds are played when the player is in an area where the textures are blending. So it might play rock while over a dirt area, but the end result is still a seamless audio visual experience.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_has_region:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **has_region** **(** :ref:`Vector3<class_Vector3>` global_position **)**

Returns true if the specified location has a region allocated.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_import_images:

.. rst-class:: classref-method

void **import_images** **(** :ref:`Image[]<class_Image>` images, :ref:`Vector3<class_Vector3>` global_position=Vector3(0, 0, 0), :ref:`float<class_float>` offset=0.0, :ref:`float<class_float>` scale=1.0 **)**

Imports an Image set (Height, Control, Color) into this resource. It does NOT normalize values to 0-1. You must do that using get_min_max() and adjusting scale and offset.

\ ``images`` - MapType.TYPE_MAX sized array of Images for Height, Control, Color. Images can be blank or null.

\ ``global_position`` - X,0,Z location on the region map. Valid range is ~ (+/-8192, +/-8192).

\ ``offset`` - Add this factor to all height values, can be negative.

\ ``scale`` - Scale all height values by this factor (applied after offset).

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_layered_to_image:

.. rst-class:: classref-method

:ref:`Image<class_Image>` **layered_to_image** **(** :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type **)**

Returns an Image of the given map type that contains all regions in one large image. If the world has multiple islands, this function will return an image large enough to encompass all used regions, with black areas in between the islands.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_load_image:

.. rst-class:: classref-method

:ref:`Image<class_Image>` **load_image** **(** :ref:`String<class_String>` file_name, :ref:`int<class_int>` cache_mode=0, :ref:`Vector2<class_Vector2>` r16_height_range=Vector2(0, 255), :ref:`Vector2i<class_Vector2i>` r16_size=Vector2i(0, 0) **)** |static|

Loads a file from disk and returns an Image.

\ ``filename`` - The file name on disk to load. Loads EXR, R16/RAW, PNG, or a ResourceLoader format (jpg, res, tres, etc).

\ ``cache_mode`` - Send this flag to the resource loader to force caching or not.

\ ``height_range`` - Heights for R16 format. x=Min & y=Max value ranges. Required for R16 import.

\ ``size`` - Image dimensions for R16 format. Default (0,0) auto detects size, assuming square images. Required for non-square R16.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_remove_region:

.. rst-class:: classref-method

void **remove_region** **(** :ref:`Vector3<class_Vector3>` global_position, :ref:`bool<class_bool>` update=true **)**

Removes the region at the specified location from the :ref:`region_offsets<class_Terrain3DStorage_property_region_offsets>` and the height, control, and color map arrays.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_save:

.. rst-class:: classref-method

void **save** **(** **)**

Saves this storage resource to disk, if saved as an external ``.res`` file, which is the recommended practice.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_set_color:

.. rst-class:: classref-method

void **set_color** **(** :ref:`Vector3<class_Vector3>` global_position, :ref:`Color<class_Color>` color **)**

Sets the color on the color map pixel associated with the specified location.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_set_control:

.. rst-class:: classref-method

void **set_control** **(** :ref:`Vector3<class_Vector3>` global_position, :ref:`int<class_int>` control **)**

Sets the value on the control map pixel associated with the specified location.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_set_height:

.. rst-class:: classref-method

void **set_height** **(** :ref:`Vector3<class_Vector3>` global_position, :ref:`float<class_float>` height **)**

Sets the height value on the heightmap pixel associated with the specified location.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_set_map_region:

.. rst-class:: classref-method

void **set_map_region** **(** :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type, :ref:`int<class_int>` region_index, :ref:`Image<class_Image>` image **)**

Sets the Image for the specified map type and region.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_set_maps:

.. rst-class:: classref-method

void **set_maps** **(** :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type, :ref:`Image[]<class_Image>` maps **)**

Sets the Array of Images for the specified map type.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_set_pixel:

.. rst-class:: classref-method

void **set_pixel** **(** :ref:`MapType<enum_Terrain3DStorage_MapType>` map_type, :ref:`Vector3<class_Vector3>` global_position, :ref:`Color<class_Color>` pixel **)**

Sets the pixel for the map type associated with the specified location.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_set_roughness:

.. rst-class:: classref-method

void **set_roughness** **(** :ref:`Vector3<class_Vector3>` global_position, :ref:`float<class_float>` roughness **)**

Sets the roughness modifier (wetness) on the color map alpha channel associated with the specified location.

.. rst-class:: classref-item-separator

----

.. _class_Terrain3DStorage_method_update_height_range:

.. rst-class:: classref-method

void **update_height_range** **(** **)**

Evaluates every height map pixel for every region and updates :ref:`height_range<class_Terrain3DStorage_property_height_range>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
