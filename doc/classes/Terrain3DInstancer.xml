<?xml version="1.0" encoding="UTF-8" ?>
<class name="Terrain3DInstancer" inherits="Object" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
	</brief_description>
	<description>
		This class places mesh instances into MultiMeshInstance3Ds defined in the Terrain3D asset dock. 
		Data is currently stored in MultiMeshes within a Dictionary [member Terrain3DRegion.multimeshes], per region, per mesh type. These MultiMeshes are loaded into MultiMeshInstances, which are attached to the scene tree and managed by this class.
		[b]The methods available for adding instances are:[/b]
		- [method add_instances] - A feature rich function designed for hand editing via Terrain3DEditor.
		- [method add_multimesh] - Pulls the transforms out of your MultiMesh and calls add_transforms.
		- [method add_transforms] - Accepts your list of transforms and parses them into our data storage.
		- Creating your own MultiMesh resources and inserting them directly into the [member Terrain3DRegion.multimeshes] dictionary. It's not difficult to do this in GDScript, but a thorough understanding of the C++ code in this class is recommended. Specifically look at `update_multimesh()`.
		[b]The methods available for removing instances are:[/b]
		- [method remove_instances] - Like add_instances, this is can be used procedurally but is designed for hand editing.
		- [method clear_by_mesh], [method clear_by_location] - To erase large sections of instances
		[b]Note:[/b] one caveat about creating your own MultiMeshes is the instance count cannot be changed after creation. Should you wish to remove 50% of the transforms, you would need to make a new MultiMesh, copy over the mesh and settings, copy the 50% of the transforms you wish to keep, and assign it to the MultiMeshInstance3D. That is how the instancer updates the MMIs.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_instances">
			<return type="void" />
			<param index="0" name="global_position" type="Vector3" />
			<param index="1" name="params" type="Dictionary" />
			<description>
				Used by Terrain3DEditor to place instances given many brush parameters. In addition to the brush position, it also uses the following parameters: asset_id, size, strength, fixed_scale, random_scale, fixed_spin, random_spin, fixed_angle, random_angle, align_to_normal, height_offset, random_height, vertex_color, random_hue, random_darken. All of these settings are set in the editor through tool_settings.gd.
			</description>
		</method>
		<method name="add_multimesh">
			<return type="void" />
			<param index="0" name="mesh_id" type="int" />
			<param index="1" name="multimesh" type="MultiMesh" />
			<param index="2" name="transform" type="Transform3D" default="Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)" />
			<description>
				Allows procedural placement of meshes. The [Terrain3DMeshAsset] mesh_id should already be setup. This extracts the instance transforms and colors from a multimesh and passes it to [method add_transforms].
			</description>
		</method>
		<method name="add_transforms">
			<return type="void" />
			<param index="0" name="mesh_id" type="int" />
			<param index="1" name="transforms" type="Transform3D[]" />
			<param index="2" name="colors" type="Color[]" default="[]" />
			<description>
				Allows procedural placement of meshes. The [Terrain3DMeshAsset] mesh_id should already be setup. Then you provide the array of Transform3Ds and optional Colors, which will be parsed into our region based data storage and fed directly into the appropriate MultiMeshInstances.
				This function adds the [member Terrain3DMeshAsset.height_offset] to the transform along its local Y axis.
			</description>
		</method>
		<method name="append_multimesh">
			<return type="void" />
			<param index="0" name="region_location" type="Vector2i" />
			<param index="1" name="mesh_id" type="int" />
			<param index="2" name="transforms" type="Transform3D[]" />
			<param index="3" name="colors" type="Color[]" />
			<param index="4" name="clear" type="bool" default="false" />
			<description>
				Appends new transforms to existing multimeshes. Multimesh transform arrays cannot be modified and must be rebuilt. This will make a new array with both old and new transforms. `Clear` will skip the old array.
			</description>
		</method>
		<method name="clear_by_location">
			<return type="void" />
			<param index="0" name="region_location" type="Vector2i" />
			<param index="1" name="mesh_id" type="int" />
			<description>
				Removes MultiMeshInstance nodes attached to the tree, and MultiMeshes in Terrain3DRegions that match both the region location and the mesh id.
			</description>
		</method>
		<method name="clear_by_mesh">
			<return type="void" />
			<param index="0" name="mesh_id" type="int" />
			<description>
				Removes MultiMeshInstance nodes attached to the tree, and MultiMeshes in Terrain3DRegions that match the mesh id.
			</description>
		</method>
		<method name="force_update_mmis">
			<return type="void" />
			<description>
				Removes and rebuilds all MultiMeshInstances.
			</description>
		</method>
		<method name="get_mmis" qualifiers="const">
			<return type="Dictionary" />
			<description>
				Returns the dictionary containing the MultiMeshInstance3D nodes, which are hidden children of Terrain3D. The dictionary is keyed by Vector3i(region_location.x, region_location.y, mesh_id).
			</description>
		</method>
		<method name="remove_instances">
			<return type="void" />
			<param index="0" name="global_position" type="Vector3" />
			<param index="1" name="params" type="Dictionary" />
			<description>
				Uses parameters asset_id, size, strength, fixed_scale, random_scale, to randomly remove instances within the indicated brush position and size.
			</description>
		</method>
		<method name="set_cast_shadows">
			<return type="void" />
			<param index="0" name="mesh_id" type="int" />
			<param index="1" name="mode" type="int" enum="GeometryInstance3D.ShadowCastingSetting" />
			<description>
				Tells the renderer how to cast shadows from this mesh asset onto the terrain and other objects. This sets [code skip-lint]GeometryInstance3D.ShadowCastingSetting[/code] on all MultiMeshInstances for the specified mesh. This function is called by [member Terrain3DMeshAsset.cast_shadows], but you can also call it manually.
			</description>
		</method>
		<method name="swap_ids">
			<return type="void" />
			<param index="0" name="src_id" type="int" />
			<param index="1" name="dest_id" type="int" />
			<description>
				Swaps the ID of two meshes, without changing the mesh instances on the ground. Updates Multimesh and MMI dictionary keys.
			</description>
		</method>
		<method name="update_transforms">
			<return type="void" />
			<param index="0" name="aabb" type="AABB" />
			<description>
				Reviews all existing instance transforms within an AABB and adjusts their heights to match the terrain.
			</description>
		</method>
	</methods>
</class>
