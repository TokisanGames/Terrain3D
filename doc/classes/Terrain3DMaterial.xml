<?xml version="1.0" encoding="UTF-8" ?>
<class name="Terrain3DMaterial" inherits="Resource" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		A custom shader material resource for Terrain3D.
	</brief_description>
	<description>
		This class handles options for both the built-in shader and any custom override shader. It collects compiled texture data from the other classes and sends all of it to the shader via the RenderingServer.
		It is a savable resource, so you can save it to disk and use the same material settings in multiple scenes that use Terrain3D. The amount of data is small, assuming you have saved your shader parameter textures to disk, so it can be saved as a git-friendly, text based .tres file or left within the scene file.
		While it does mimic some of the functionality of ShaderMaterial, it does not derive from any of the Godot Material classes. It will not pass any [code skip-lint]is Material[/code] checks. It is a [code skip-lint]Resource[/code].
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="get_material_rid">
			<return type="RID" />
			<description>
				Returns the RID of the material used with the Rendering Server. This is set per instance of this class.
			</description>
		</method>
		<method name="get_region_blend_map">
			<return type="RID" />
			<description>
				Returns the RID of the 512x512 texture used with the RenderingServer. It depicts a blurry map of region locations and is used for smoothly blending world noise into sculpted terrain.
			</description>
		</method>
		<method name="get_shader_param">
			<return type="Variant" />
			<param index="0" name="name" type="StringName" />
			<description>
				Retrieve a parameter from the active shader (built-in or override shader).
			</description>
		</method>
		<method name="get_shader_rid">
			<return type="RID" />
			<description>
				Returns the RID of the built in shader used with the Rendering Server. This is different from any shader override which has its own RID.
			</description>
		</method>
		<method name="save">
			<return type="void" />
			<description>
				Saves this material resource to disk, if saved as an external [code skip-lint].tres[/code] or [code skip-lint].res[/code] resource file.
			</description>
		</method>
		<method name="set_shader_param">
			<return type="void" />
			<param index="0" name="name" type="StringName" />
			<param index="1" name="value" type="Variant" />
			<description>
				Set a parameter in the active shader (built-in or override shader).
			</description>
		</method>
	</methods>
	<members>
		<member name="_shader_parameters" type="Dictionary" setter="_set_shader_parameters" getter="_get_shader_parameters" default="{}">
			This private dictionary stores all of the shader parameters in the resource. It is not a cache.
		</member>
		<member name="auto_shader" type="bool" setter="set_auto_shader" getter="get_auto_shader" default="false">
			Enables selecting two texture IDs that will automatically be applied to the terrain based upon slope.
		</member>
		<member name="dual_scaling" type="bool" setter="set_dual_scaling" getter="get_dual_scaling" default="false">
			Enables selecting one texture ID that will have multiple scales applied based upon camera distance. Use it for something like a rock texture so up close it will be nicely detailed, and far away mountains can be covered in the same rock texture. The two blend together at a specified distance.
		</member>
		<member name="shader_override" type="Shader" setter="set_shader_override" getter="get_shader_override">
			If shader_override_enabled is true and this Shader is valid, the material will use this custom shader code. If this is blank when you enable the override, the system will generate a shader with the current settings. So if you have a debug view enabled, the generated shader will have all of that code. A visual shader will also work here. However we only generate a text based shader so currently a visual shader needs to be constructed with the base code before it can work.
		</member>
		<member name="shader_override_enabled" type="bool" setter="enable_shader_override" getter="is_shader_override_enabled" default="false">
			Enables use of the [member shader_override] shader code. Generates default code if shader_override is blank.
		</member>
		<member name="show_autoshader" type="bool" setter="set_show_autoshader" getter="get_show_autoshader" default="false">
			Display the area designated for use by the autoshader, which shows materials based upon slope.
		</member>
		<member name="show_checkered" type="bool" setter="set_show_checkered" getter="get_show_checkered" default="false">
			Shows a checkerboard display using a shader rendered pattern. This is turned on if the Texture List is empty.
			Note that when a blank texture slot is created, a 1k checkerboard texture is generated and stored in the texture slot. That takes VRAM. The two patterns have a slightly different scale.
		</member>
		<member name="show_colormap" type="bool" setter="set_show_colormap" getter="get_show_colormap" default="false">
			Places the color map in the albedo channel.
		</member>
		<member name="show_control_angle" type="bool" setter="set_show_control_angle" getter="get_show_control_angle" default="false">
			Albedo shows the painted angle. Orange means 0째, Yellow 270째, Cyan 180째, Violet 90째. Or warm colors towards -Z, cool colors +Z, greens/yellows +X, reds/blues -X. Draw all angles coming from the center of a circle for a better understanding.
		</member>
		<member name="show_control_blend" type="bool" setter="set_show_control_blend" getter="get_show_control_blend" default="false">
			Albedo shows the blend value used to blend the base and overlay textures as greyscale. This is especially helpful to see how the noise texture adjusts the blending edges.
		</member>
		<member name="show_control_scale" type="bool" setter="set_show_control_scale" getter="get_show_control_scale" default="false">
			Albedo shows the painted scale. Larger scales are more red, smaller scales are more blue. 0.5 middle grey is the default 100% scale.
		</member>
		<member name="show_control_texture" type="bool" setter="set_show_control_texture" getter="get_show_control_texture" default="false">
			Albedo shows the base and overlay texture indices defined by the control map. Red pixels indicate the base texture, with brightness showing texture ids 0 to 31. Green pixels indicate the overlay texture. Yellow indicates both.
		</member>
		<member name="show_grey" type="bool" setter="set_show_grey" getter="get_show_grey" default="false">
			Albedo is set to 0.2 grey.
		</member>
		<member name="show_heightmap" type="bool" setter="set_show_heightmap" getter="get_show_heightmap" default="false">
			Albedo is a white to black gradient depending on height. The gradient is scaled to a height of 300, so above that or far below 0 will be all white or black.
		</member>
		<member name="show_navigation" type="bool" setter="set_show_navigation" getter="get_show_navigation" default="false">
			Displays the area designated for generating the navigation mesh.
		</member>
		<member name="show_roughmap" type="bool" setter="set_show_roughmap" getter="get_show_roughmap" default="false">
			Albedo is set to the roughness modification map as grey scale. Middle grey, 0.5 means no roughness modification. Black would be high gloss while white is very rough.
		</member>
		<member name="show_texture_height" type="bool" setter="set_show_texture_height" getter="get_show_texture_height" default="false">
			Albedo is set to the painted Height textures.
		</member>
		<member name="show_texture_normal" type="bool" setter="set_show_texture_normal" getter="get_show_texture_normal" default="false">
			Albedo is set to the painted Normal textures.
		</member>
		<member name="show_texture_rough" type="bool" setter="set_show_texture_rough" getter="get_show_texture_rough" default="false">
			Albedo is set to the painted Roughness textures. This is different from the roughness modification map above.
		</member>
		<member name="show_vertex_grid" type="bool" setter="set_show_vertex_grid" getter="get_show_vertex_grid" default="false">
			Show a grid on the vertices, overlaying any above shader.
		</member>
		<member name="texture_filtering" type="int" setter="set_texture_filtering" getter="get_texture_filtering" enum="Terrain3DMaterial.TextureFiltering" default="0">
			Sets how the renderer should filter textures. See [enum TextureFiltering] for options.
		</member>
		<member name="world_background" type="int" setter="set_world_background" getter="get_world_background" enum="Terrain3DMaterial.WorldBackground" default="1">
			Sets how the mesh outside of defined regions behave. See [enum WorldBackground] for options.
		</member>
	</members>
	<constants>
		<constant name="NONE" value="0" enum="WorldBackground">
			Outside of the defined regions, hide the mesh.
		</constant>
		<constant name="FLAT" value="1" enum="WorldBackground">
			Outside of the defined regions, show a flat terrain.
		</constant>
		<constant name="NOISE" value="2" enum="WorldBackground">
			Outside of the defined regions, generate visual-only hills.
		</constant>
		<constant name="LINEAR" value="0" enum="TextureFiltering">
			Textures are filtered using a blend of 4 adjacent pixels. Use this for most cases for high quality renders.
		</constant>
		<constant name="NEAREST" value="1" enum="TextureFiltering">
			Textures are filtered using a the nearest pixel only. It is faster than LINEAR, but the texture will look pixelated. Use this for a low-poly look, with a very low uv_scale.
		</constant>
	</constants>
</class>
