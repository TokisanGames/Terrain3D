<?xml version="1.0" encoding="UTF-8" ?>
<class name="Terrain3DMeshAsset" inherits="Resource" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
	</brief_description>
	<description>
		This class provides one of two mesh types for instancing.
		First, this class will generate a texture card, using a QuadMesh.	The typical use for a texture card is to place a flat grass texture in the `albedo texture` slot in the override material, and enable alpha scissor. This will generate low poly grass.
		Second, you can link this resource to a mesh scene file, which is specifically a PackedScene (.tscn, .scn, .glb, .fbx, etc). You can override the material if desired. Multimeshes only support one mesh object, so complex objects like tree trunks and leaves, or a door frame and door either need to be combined into one object with multiple materials, or placed by another method. Read the [url=https://docs.godotengine.org/en/stable/classes/class_multimesh.html]Godot MultiMesh docs[/url] for more information.
		Currently, the system will use only the first MeshInstance3D it finds in the file. It doesn't apply any transforms nor collision found in the file. Auto generated LODs are used by the engine. Manual LODs will be supported later.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="clear">
			<return type="void" />
			<description>
				Reset this resource to default settings.
			</description>
		</method>
		<method name="get_mesh">
			<return type="Mesh" />
			<param index="0" name="index" type="int" default="0" />
			<description>
				Returns the specified Mesh resource indicated. Only id 0 is used currently.
			</description>
		</method>
		<method name="get_mesh_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of Mesh resources found in the scene file and stored.
			</description>
		</method>
		<method name="get_thumbnail" qualifiers="const">
			<return type="Texture2D" />
			<description>
				Returns the thumbnail generated by [Terrain3DAssets].
			</description>
		</method>
	</methods>
	<members>
		<member name="cast_shadows" type="int" setter="set_cast_shadows" getter="get_cast_shadows" enum="GeometryInstance3D.ShadowCastingSetting" default="1">
			Tells the renderer how to cast shadows from this mesh asset onto the terrain and other objects. This sets [code skip-lint]GeometryInstance3D.cast_shadow[/code] on all MultiMeshInstances used by this mesh.
		</member>
		<member name="density" type="float" setter="set_density" getter="get_density" default="-1.0">
			Density is used to set the approximate default spacing between instances based on the size of the mesh. When painting meshes on the terrain, mesh density is multiplied by brush strength.
			This value is not tied to any real world unit. It is calculated as [code skip-lint]10.f / mesh-&gt;get_aabb().get_volume()[/code], then clamped to a sane range. If the calculated amount is inappropriate, increase or decrease it here.
		</member>
		<member name="generated_faces" type="int" setter="set_generated_faces" getter="get_generated_faces" default="2">
			Select if you want the generated texture card to have a single QuadMesh, 2 meshes rotated at 90° in a cross, or 3 roated at 60°.
		</member>
		<member name="generated_size" type="Vector2" setter="set_generated_size" getter="get_generated_size" default="Vector2(1, 1)">
			Sets the base size of the QuadMesh texture card. Increasing this size will expand from bottom, not the middle.
		</member>
		<member name="generated_type" type="int" setter="set_generated_type" getter="get_generated_type" enum="Terrain3DMeshAsset.GenType" default="0">
			If enabled, this mesh asset will be set to a generated QuadMesh to be used as a texture card.
		</member>
		<member name="height_offset" type="float" setter="set_height_offset" getter="get_height_offset" default="0.0">
			Vertically offset the origin point of a mesh asset. You can also set this when painting. For example, if you have a 2 meter diameter rock with the mesh origin point in the center, but you want all rocks to be sitting on the ground, you could enter 1 or 0.9 here and it will be placed near its edge.
		</member>
		<member name="id" type="int" setter="set_id" getter="get_id" default="0">
			The user settable ID of the mesh. You can change this to reorder meshes in the list.
		</member>
		<member name="material_override" type="Material" setter="set_material_override" getter="get_material_override">
			This material will override the material on either packed scenes or generated mesh cards.
		</member>
		<member name="name" type="String" setter="set_name" getter="get_name" default="&quot;New Mesh&quot;">
			A user specified name for this asset.
		</member>
		<member name="scene_file" type="PackedScene" setter="set_scene_file" getter="get_scene_file">
			A packed scene to load the mesh from. See the top description.
		</member>
		<member name="visibility_range" type="float" setter="set_visibility_range" getter="get_visibility_range" default="100.0">
			Sets [code skip-lint]GeometryInstance3D.visibility_range_end[/code] on all MultiMeshInstances used by this mesh. Allows the renderer to cull MMIs beyond this distance. Set to 0 to disable culling.
		</member>
	</members>
	<signals>
		<signal name="file_changed">
			<description>
				Emitted when [member scene_file] is changed, or if the generated mesh is toggled.
			</description>
		</signal>
		<signal name="id_changed">
			<description>
				Emitted when [member id] is changed.
			</description>
		</signal>
		<signal name="instancer_setting_changed">
			<description>
				Emitted when instancer specific settings are changed on this mesh asset, such as [member cast_shadows] or [member visibility_range].
			</description>
		</signal>
		<signal name="setting_changed">
			<description>
				Emitted when settings are changed, other than those tracked by other signals.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="TYPE_NONE" value="0" enum="GenType">
		</constant>
		<constant name="TYPE_TEXTURE_CARD" value="1" enum="GenType">
			Generate a QuadMesh to be used as a texture card.
		</constant>
		<constant name="TYPE_MAX" value="2" enum="GenType">
		</constant>
	</constants>
</class>
