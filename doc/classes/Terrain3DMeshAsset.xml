<?xml version="1.0" encoding="UTF-8" ?>
<class name="Terrain3DMeshAsset" inherits="Resource" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
	</brief_description>
	<description>
		This class provides one of two mesh types for instancing. 
		First, this class will generate a texture card, using a QuadMesh.	The typical use for a texture card is to place a flat grass texture in the `albedo texture` slot in the override material, and enable alpha scissor. This will generate low poly grass.
		Second, you can link this resource to a mesh scene file, which is specifically a PackedScene (.tscn, .scn, .glb, .fbx, etc). You can override the material if desired.
		Currently, the system will use only the first MeshInstance3D it finds in the file. It doesn't apply any transforms nor collision found in the file. Auto generated lods are used by the engine.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="clear">
			<return type="void" />
			<description>
				Reset this resource to default settings.
			</description>
		</method>
		<method name="get_mesh">
			<return type="Mesh" />
			<param index="0" name="index" type="int" default="0" />
			<description>
				Returns the specified Mesh resource indicated. Only id 0 is used currently.
			</description>
		</method>
		<method name="get_mesh_count">
			<return type="int" />
			<description>
				Returns the number of Mesh resources found in the scene file and stored.
			</description>
		</method>
		<method name="get_relative_density">
			<return type="float" />
			<description>
				Used for regulating placement, calculated as `100.f / mesh.get_aabb().get_volume()`.
			</description>
		</method>
		<method name="get_thumbnail">
			<return type="Texture2D" />
			<description>
				Returns the thumbnail generated by [Terrain3DAssets].
			</description>
		</method>
	</methods>
	<members>
		<member name="generated_size" type="Vector2" setter="set_generated_size" getter="get_generated_size" default="Vector2(1, 1)">
			Sets the base size of the QuadMesh texture card.
		</member>
		<member name="generated_type" type="int" setter="set_generated_type" getter="get_generated_type" enum="Terrain3DMeshAsset.GenType" default="0">
			Set this mesh asset to a generated QuadMesh to be used as a texture card.
		</member>
		<member name="height_offset" type="float" setter="set_height_offset" getter="get_height_offset" default="0.0">
			Vertically offset the origin point of a mesh asset. You can also set this when painting.
		</member>
		<member name="id" type="int" setter="set_id" getter="get_id" default="0">
			The user settable ID of the mesh. You can change this to reorder meshes in the list. However, beware if you have instanced 10s or 100s of thousands of texture cards, then swap this mesh id with a large mesh, you'll blow out your VRAM. Godot has no protection against running out of VRAM currently.
		</member>
		<member name="material_override" type="Material" setter="set_material_override" getter="get_material_override">
			This material will override the material on either packed scenes or generated mesh cards.
		</member>
		<member name="name" type="String" setter="set_name" getter="get_name" default="&quot;New Mesh&quot;">
			A user specified name for this asset.
		</member>
		<member name="scene_file" type="PackedScene" setter="set_scene_file" getter="get_scene_file">
			A packed scene to load the mesh from. See the top description.
		</member>
	</members>
	<signals>
		<signal name="file_changed">
			<description>
				Emitted when [member scene_file] is changed, or if the generated mesh is toggled.
			</description>
		</signal>
		<signal name="id_changed">
			<description>
				Emitted when [member id] is changed.
			</description>
		</signal>
		<signal name="setting_changed">
			<description>
				Emitted when settings other than id or scene file are changed.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="TYPE_NONE" value="0" enum="GenType">
		</constant>
		<constant name="TYPE_TEXTURE_CARD" value="1" enum="GenType">
			Generate a QuadMesh to be used as a texture card.
		</constant>
		<constant name="TYPE_MAX" value="2" enum="GenType">
		</constant>
	</constants>
</class>
